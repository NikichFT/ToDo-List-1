[{"E:\\ReactJS training\\todo-list\\src\\index.js":"1","E:\\ReactJS training\\todo-list\\src\\App.js":"2","E:\\ReactJS training\\todo-list\\src\\redux\\rootReducer.js":"3","E:\\ReactJS training\\todo-list\\src\\redux\\postsReducer.js":"4","E:\\ReactJS training\\todo-list\\src\\redux\\appReducer.js":"5","E:\\ReactJS training\\todo-list\\src\\components\\PostForm.js":"6","E:\\ReactJS training\\todo-list\\src\\redux\\types.js":"7","E:\\ReactJS training\\todo-list\\src\\redux\\actions.js":"8","E:\\ReactJS training\\todo-list\\src\\components\\Alert.js":"9","E:\\ReactJS training\\todo-list\\src\\components\\Loader.js":"10","E:\\ReactJS training\\todo-list\\src\\components\\Post.js":"11","E:\\ReactJS training\\todo-list\\src\\components\\FinishedTasks.js":"12","E:\\ReactJS training\\todo-list\\src\\components\\UnfinishedTasks.js":"13","E:\\ReactJS training\\todo-list\\src\\components\\TodayTasks.js":"14"},{"size":633,"mtime":1612388181629,"results":"15","hashOfConfig":"16"},{"size":1057,"mtime":1612369238347,"results":"17","hashOfConfig":"16"},{"size":231,"mtime":1612367110778,"results":"18","hashOfConfig":"16"},{"size":1621,"mtime":1612367581619,"results":"19","hashOfConfig":"16"},{"size":383,"mtime":1612367150401,"results":"20","hashOfConfig":"16"},{"size":3294,"mtime":1612367635183,"results":"21","hashOfConfig":"16"},{"size":237,"mtime":1612367569384,"results":"22","hashOfConfig":"16"},{"size":1425,"mtime":1612370603572,"results":"23","hashOfConfig":"16"},{"size":150,"mtime":1611883382459,"results":"24","hashOfConfig":"16"},{"size":196,"mtime":1612367856354,"results":"25","hashOfConfig":"16"},{"size":5807,"mtime":1612371093752,"results":"26","hashOfConfig":"16"},{"size":1490,"mtime":1612369167227,"results":"27","hashOfConfig":"16"},{"size":1495,"mtime":1612368247919,"results":"28","hashOfConfig":"16"},{"size":2250,"mtime":1612369171756,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1c86snu",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},"E:\\ReactJS training\\todo-list\\src\\index.js",["65"],"E:\\ReactJS training\\todo-list\\src\\App.js",[],["66","67"],"E:\\ReactJS training\\todo-list\\src\\redux\\rootReducer.js",[],"E:\\ReactJS training\\todo-list\\src\\redux\\postsReducer.js",["68","69"],"import { CREATE_POST, COMPLETE_POST, FETCH_POSTS, OVERDUE_POST, CHANGE_POST } from \"./types\"\r\n\r\nconst initialState = [\r\n\r\n];\r\n\r\nexport const postsReducer = (state = initialState, {type, title, id, date, completed, overdue, changed, timeToComplete}) => {\r\n    switch (type) {\r\n        case CREATE_POST:\r\n            if (!changed) {return [...state, {\r\n                title,\r\n                id,\r\n                date,\r\n                completed,\r\n                timeToComplete,\r\n                overdue\r\n            }]}\r\n            return [...state].map((task)=>{\r\n                if (task.id === id && !task.completed) {\r\n                    task.title = title\r\n                    task.id = id\r\n                    task.date = date\r\n                    task.completed = completed\r\n                    task.timeToComplete = timeToComplete\r\n                    task.overdue = overdue\r\n                }\r\n                return task     \r\n        })\r\n            \r\n        case COMPLETE_POST: \r\n\r\n            return [...state].map((task)=>{\r\n                if (task.id === id) {\r\n                    task.completed = !task.completed;\r\n                }\r\n                return task\r\n                \r\n            })\r\n        case OVERDUE_POST: \r\n            return [...state].map((task)=>{\r\n                if (task.id === id && !task.completed && task.date && task.date === date) {\r\n                    task.overdue = true;\r\n                    task.completed = null\r\n                } else if (task.changed) {task.overdue = false}\r\n                return task     \r\n        })\r\n        default: return state\r\n    }\r\n}","E:\\ReactJS training\\todo-list\\src\\redux\\appReducer.js",[],"E:\\ReactJS training\\todo-list\\src\\components\\PostForm.js",[],"E:\\ReactJS training\\todo-list\\src\\redux\\types.js",[],"E:\\ReactJS training\\todo-list\\src\\redux\\actions.js",[],"E:\\ReactJS training\\todo-list\\src\\components\\Alert.js",[],"E:\\ReactJS training\\todo-list\\src\\components\\Loader.js",[],["70","71"],"E:\\ReactJS training\\todo-list\\src\\components\\Post.js",["72","73","74","75","76"],"import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { completeTask, createPost, overdueTask } from '../redux/actions';\r\n\r\nconst Post = ({post, completeTask, completed, overdue, changeTask, createPost, timeToComplete}) => {\r\n\r\n    \r\n\r\n    const getTime = (date) =>{\r\n        const thisDate = new Date()\r\n\r\n        if (date) {\r\n            const thisYear = thisDate.getFullYear()\r\n            const thisMonth = thisDate.getMonth()+1\r\n            const thisDay = thisDate.getDate()\r\n            const thisHour = thisDate.toString().split(' ')[4].split(':')[0]\r\n            const thisMinute = thisDate.toString().split(' ')[4].split(':')[1]\r\n            const thisSecond = thisDate.toString().split(' ')[4].split(':')[2]\r\n            \r\n            const secTask = Date.parse(`${date.split('T')[0].split('-').join('.')} ${date.split('T')[1]}`)\r\n            const secThis = Date.parse(`${thisYear}.${thisMonth}.${thisDay} ${thisHour}:${thisMinute}:${thisSecond}`)\r\n            const t = secTask-secThis;\r\n            return t ? t : null\r\n        }\r\n    }  \r\n\r\n    const [task, setTask] = useState({\r\n        title: post.title,\r\n        id: post.id,\r\n        date: post.date,\r\n        completed: post.overdue,\r\n        overdue: post.overdue,\r\n        timeToComplete: post.timeToComplete\r\n    });\r\n\r\n    //LocalStorage \r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTask(post);\r\n    }, [post])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTask(task);\r\n    }, [task])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(task))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n       \r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (post.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTask(todoLocal);\r\n            createPost(todoLocal);\r\n        }\r\n    }\r\n\r\n    //обработка инпута\r\n    const changeInputHandlerDate = event => {\r\n        event.persist()\r\n        createPost({\r\n            title: task.title,\r\n            id: post.id,\r\n            [event.target.name]: event.target.value,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: getTime(event.target.value),\r\n            changed: true \r\n        });\r\n        setTask({\r\n            title: task.title,\r\n            id: post.id,\r\n            [event.target.name]: event.target.value,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: getTime(event.target.value),\r\n            changed: true \r\n        })\r\n\r\n    }\r\n\r\n    const changeInputHandlerTitle = event => {\r\n        event.persist()\r\n        createPost({\r\n            [event.target.name]: event.target.value,\r\n            id: post.id,\r\n            date: task.date,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: timeToComplete,\r\n            changed: true \r\n        });\r\n        setTask({\r\n            [event.target.name]: event.target.value,\r\n            id: post.id,\r\n            date: task.date,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: timeToComplete,\r\n            changed: true \r\n        })\r\n\r\n    }\r\n\r\n    const changeInputHandlerCopy = event => {\r\n        event.persist()\r\n        createPost({\r\n            title: task.title,\r\n            id: Date.now().toString(),\r\n            completed: !post.completed,\r\n            overdue: false\r\n        });\r\n        setTask({\r\n            title: task.title,\r\n            id: Date.now().toString(),\r\n            date: task.date,\r\n            completed: !post.completed,\r\n            overdue: false\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={`card ${completed ? 'bg-success text-white' : 'bg-light text-dark'} mb-3`}>\r\n            <div className={`card-body ${overdue && post.date  ? 'bg-danger' : ''}`} style={{textDecoration: completed ? 'line-through' : 'none' }}>\r\n                <input type=\"text\" defaultValue={post.title} name=\"title\" onBlur={(event)=>{changeInputHandlerTitle(event)}} className=\"form-control card-header\"/>\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-text\">complete before: </div>\r\n                    <div className=\"col-10\">\r\n                            <input className=\"form-control\" defaultValue={post.date ? post.date.split('T').join(' ') : post.date} type=\"datetime-local\" defaultValue={post.date} name=\"date\" onBlur={(event)=>{changeInputHandlerDate(event)}} id=\"datetime-local-input\"/>\r\n                    </div>  \r\n            </div>                       \r\n            </div>\r\n            <div className=\"input-group-text\"  style={{display: `${overdue && post.date ? 'none' : 'inline-block'}`}}>\r\n                    <input className=\"form-check-input btn-outline-info\" onClick={() => {completeTask(post.id)}} type=\"checkbox\" defaultChecked={completed ? true : false} value=\"\" aria-label=\"Checkbox for following text input\"/>\r\n            </div>\r\n            {completed && <button name='completed' value='false' onClick={(event) => changeInputHandlerCopy(event)} type=\"button\" className=\"btn btn-primary\">Copy</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts.posts,\r\n        id: state.posts.id\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    completeTask: completeTask,\r\n    overdueTask: overdueTask,\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","E:\\ReactJS training\\todo-list\\src\\components\\FinishedTasks.js",["77","78","79","80","81"],"import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst FinishedTasks = ({syncPosts}) => {\r\n\r\n    const [tasks, setTasks] = useState(syncPosts)\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(syncPosts);\r\n    }, [syncPosts])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(tasks);\r\n    }, [tasks])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(tasks))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (syncPosts.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTasks(todoLocal);\r\n        }\r\n    }\r\n    \r\n    if (syncPosts.length == 0 || !tasks) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        tasks.map(post => post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>)\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishedTasks)","E:\\ReactJS training\\todo-list\\src\\components\\UnfinishedTasks.js",["82","83","84","85","86"],"import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst UnfinishedTasks = ({syncPosts}) => {\r\n\r\n    const [tasks, setTasks] = useState(syncPosts)\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(syncPosts);\r\n    }, [syncPosts])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(tasks);\r\n    }, [tasks])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(tasks))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (syncPosts.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTasks(todoLocal);\r\n        }\r\n    }\r\n    \r\n    if (syncPosts.length == 0 || !tasks) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        tasks.map(post => !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>)\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UnfinishedTasks)","E:\\ReactJS training\\todo-list\\src\\components\\TodayTasks.js",["87","88","89","90","91","92","93"],"import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst TodayTasks = ({syncPosts}) => {\r\n\r\n    const [tasks, setTasks] = useState(syncPosts)\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(syncPosts);\r\n    }, [syncPosts])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(tasks);\r\n    }, [tasks])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(tasks))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (syncPosts.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTasks(todoLocal);\r\n            createPost(todoLocal);\r\n        }\r\n    }\r\n\r\n    const thisDate = new Date()\r\n\r\n\r\n    const thisYear = thisDate.getFullYear()\r\n    const thisMonth = thisDate.getMonth()+1\r\n    const thisDay = thisDate.getDate()\r\n\r\n\r\n    let date = [thisYear, thisMonth, thisDay];\r\n\r\n    let arrDate = date.map((item) => {\r\n        if(item > 0 && item < 10) {\r\n            return item = '0'+item\r\n        } return item\r\n    })\r\n    \r\n    if (syncPosts.length == 0 || !tasks) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        tasks.map(post =>{ \r\n            if (post.date) { return post.date.split('T')[0] == arrDate.join('-') && !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/> }\r\n            return !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: [...state.posts.sort(function(a, b) { if (!a.overdue || !b.overdue) return a.timeToComplete - b.timeToComplete})]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodayTasks)",{"ruleId":"94","severity":1,"message":"95","line":3,"column":23,"nodeType":"96","messageId":"97","endLine":3,"endColumn":30},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","replacedBy":"101"},{"ruleId":"94","severity":1,"message":"102","line":1,"column":38,"nodeType":"96","messageId":"97","endLine":1,"endColumn":49},{"ruleId":"94","severity":1,"message":"103","line":1,"column":65,"nodeType":"96","messageId":"97","endLine":1,"endColumn":76},{"ruleId":"98","replacedBy":"104"},{"ruleId":"100","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":39,"column":8,"nodeType":"108","endLine":39,"endColumn":10,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"110","line":44,"column":8,"nodeType":"108","endLine":44,"endColumn":14,"suggestions":"111"},{"ruleId":"106","severity":1,"message":"110","line":49,"column":8,"nodeType":"108","endLine":49,"endColumn":14,"suggestions":"112"},{"ruleId":"113","severity":1,"message":"114","line":61,"column":30,"nodeType":"115","messageId":"116","endLine":61,"endColumn":32},{"ruleId":"117","severity":1,"message":"118","line":140,"column":153,"nodeType":"119","endLine":140,"endColumn":177},{"ruleId":"106","severity":1,"message":"107","line":12,"column":8,"nodeType":"108","endLine":12,"endColumn":10,"suggestions":"120"},{"ruleId":"106","severity":1,"message":"110","line":17,"column":8,"nodeType":"108","endLine":17,"endColumn":19,"suggestions":"121"},{"ruleId":"106","severity":1,"message":"110","line":22,"column":8,"nodeType":"108","endLine":22,"endColumn":15,"suggestions":"122"},{"ruleId":"113","severity":1,"message":"114","line":33,"column":35,"nodeType":"115","messageId":"116","endLine":33,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":39,"column":26,"nodeType":"115","messageId":"116","endLine":39,"endColumn":28},{"ruleId":"106","severity":1,"message":"107","line":12,"column":8,"nodeType":"108","endLine":12,"endColumn":10,"suggestions":"123"},{"ruleId":"106","severity":1,"message":"110","line":17,"column":8,"nodeType":"108","endLine":17,"endColumn":19,"suggestions":"124"},{"ruleId":"106","severity":1,"message":"110","line":22,"column":8,"nodeType":"108","endLine":22,"endColumn":15,"suggestions":"125"},{"ruleId":"113","severity":1,"message":"114","line":33,"column":35,"nodeType":"115","messageId":"116","endLine":33,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":39,"column":26,"nodeType":"115","messageId":"116","endLine":39,"endColumn":28},{"ruleId":"106","severity":1,"message":"107","line":12,"column":8,"nodeType":"108","endLine":12,"endColumn":10,"suggestions":"126"},{"ruleId":"106","severity":1,"message":"110","line":17,"column":8,"nodeType":"108","endLine":17,"endColumn":19,"suggestions":"127"},{"ruleId":"106","severity":1,"message":"110","line":22,"column":8,"nodeType":"108","endLine":22,"endColumn":15,"suggestions":"128"},{"ruleId":"113","severity":1,"message":"114","line":33,"column":35,"nodeType":"115","messageId":"116","endLine":33,"endColumn":37},{"ruleId":"113","severity":1,"message":"114","line":56,"column":26,"nodeType":"115","messageId":"116","endLine":56,"endColumn":28},{"ruleId":"113","severity":1,"message":"114","line":61,"column":61,"nodeType":"115","messageId":"116","endLine":61,"endColumn":63},{"ruleId":"129","severity":1,"message":"130","line":70,"column":41,"nodeType":"131","messageId":"132","endLine":70,"endColumn":49},"no-unused-vars","'compose' is defined but never used.","Identifier","unusedVar","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'FETCH_POSTS' is defined but never used.","'CHANGE_POST' is defined but never used.",["133"],["134"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLocalTodos'. Either include it or remove the dependency array.","ArrayExpression",["135"],"React Hook useEffect has a missing dependency: 'saveLocalTodos'. Either include it or remove the dependency array.",["136"],["137"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["138"],["139"],["140"],["141"],["142"],["143"],["144"],["145"],["146"],"array-callback-return","Array.prototype.sort() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"147","fix":"153"},{"desc":"154","fix":"155"},{"desc":"156","fix":"157"},{"desc":"147","fix":"158"},{"desc":"154","fix":"159"},{"desc":"156","fix":"160"},{"desc":"147","fix":"161"},{"desc":"154","fix":"162"},{"desc":"156","fix":"163"},"Update the dependencies array to be: [getLocalTodos]",{"range":"164","text":"165"},"Update the dependencies array to be: [post, saveLocalTodos]",{"range":"166","text":"167"},"Update the dependencies array to be: [saveLocalTodos, task]",{"range":"168","text":"169"},{"range":"170","text":"165"},"Update the dependencies array to be: [saveLocalTodos, syncPosts]",{"range":"171","text":"172"},"Update the dependencies array to be: [saveLocalTodos, tasks]",{"range":"173","text":"174"},{"range":"175","text":"165"},{"range":"176","text":"172"},{"range":"177","text":"174"},{"range":"178","text":"165"},{"range":"179","text":"172"},{"range":"180","text":"174"},[1414,1416],"[getLocalTodos]",[1502,1508],"[post, saveLocalTodos]",[1594,1600],"[saveLocalTodos, task]",[321,323],[415,426],"[saveLocalTodos, syncPosts]",[514,521],"[saveLocalTodos, tasks]",[323,325],[417,428],[516,523],[318,320],[412,423],[511,518]]