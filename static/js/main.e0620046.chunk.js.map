{"version":3,"sources":["redux/types.js","redux/actions.js","components/Post.js","components/FinishedTasks.js","components/Alert.js","components/PostForm.js","components/UnfinishedTasks.js","components/TodayTasks.js","App.js","redux/appReducer.js","redux/postsReducer.js","redux/rootReducer.js","index.js"],"names":["CREATE_POST","COMPLETE_POST","OVERDUE_POST","SHOW_ALERT","HIDE_ALERT","createPost","post","dispatch","type","title","id","date","completed","timeToComplete","overdue","changed","setTimeout","overdueTask","mapDispatchToProps","completeTask","connect","state","syncPosts","posts","changeTask","getTime","thisDate","Date","thisYear","getFullYear","thisMonth","getMonth","thisDay","getDate","thisHour","toString","split","thisMinute","thisSecond","t","parse","join","useState","task","setTask","useEffect","className","style","textDecoration","value","name","onChange","event","persist","target","changeInputHandlerTitle","changeInputHandlerDate","display","checked","aria-label","onClick","now","changeInputHandlerCopy","length","map","Alert","text","role","PostForm","undefined","submitHandler","preventDefault","trim","props","showAlert","newPost","setState","changeInputHandler","prev","onSubmit","this","alert","htmlFor","defaultValue","React","Component","payload","todos","app","sort","a","b","filter","arrDate","item","App","paddingBottom","initialState","load","states","namespace","rootReducer","combineReducers","action","middleWare","thunk","applyMiddleware","store","createStore","composeWithDevTools","save","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e0620046.chunk.js","sourcesContent":["export const CREATE_POST = 'POST/CREATE_POST'\r\nexport const COMPLETE_POST = 'POST/COMPLETE_POST'\r\nexport const OVERDUE_POST = 'POST/OVERDUE_POST'\r\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\r\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\r\n\r\n","import { CREATE_POST, SHOW_ALERT, HIDE_ALERT, COMPLETE_POST, OVERDUE_POST } from \"./types\";\r\n\r\nexport function createPost(post) {\r\n    \r\n    return dispatch => {\r\n        // console.log(post)\r\n        dispatch({\r\n            type: CREATE_POST,\r\n            title: post.title,\r\n            id: post.id,\r\n            date: post.date,\r\n            completed: post.completed,\r\n            timeToComplete: post.timeToComplete,\r\n            overdue: post.overdue,\r\n            changed: post.changed\r\n        })\r\n\r\n    if (post.timeToComplete > 0) {setTimeout(()=>{ \r\n            dispatch(overdueTask(post.id, post.date, post.changed))\r\n        }, post.timeToComplete)} \r\n    else {setTimeout(()=>{ \r\n            dispatch(overdueTask(post.id, post.date, post.changed))\r\n        }, 0)}\r\n    }\r\n}\r\n\r\nexport function completeTask(id){\r\n    return {\r\n            type: COMPLETE_POST,\r\n            id: id\r\n        }\r\n}\r\n\r\nexport function overdueTask(id, date, changed){\r\n    return  {\r\n            type: OVERDUE_POST,\r\n            id: id,\r\n            date: date,\r\n            changed: changed\r\n    }        \r\n}\r\n\r\nexport function showAlert(text) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: text\r\n        })\r\n\r\n        setTimeout(()=>{\r\n            dispatch(hideAlert())\r\n        }, 3000)\r\n    }\r\n}\r\n\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { completeTask, createPost, overdueTask } from '../redux/actions';\r\n\r\nconst Post = ({post, completeTask, completed, overdue, changeTask, createPost, timeToComplete}) => {\r\n\r\n    \r\n\r\n    const getTime = (date) =>{\r\n        const thisDate = new Date()\r\n\r\n        if (date) {\r\n            const thisYear = thisDate.getFullYear()\r\n            const thisMonth = thisDate.getMonth()+1\r\n            const thisDay = thisDate.getDate()\r\n            const thisHour = thisDate.toString().split(' ')[4].split(':')[0]\r\n            const thisMinute = thisDate.toString().split(' ')[4].split(':')[1]\r\n            const thisSecond = thisDate.toString().split(' ')[4].split(':')[2]\r\n            \r\n            const secTask = Date.parse(`${date.split('T')[0].split('-').join('.')} ${date.split('T')[1]}`)\r\n            const secThis = Date.parse(`${thisYear}.${thisMonth}.${thisDay} ${thisHour}:${thisMinute}:${thisSecond}`)\r\n            const t = secTask-secThis;\r\n            return t ? t : null\r\n        }\r\n    }  \r\n\r\n    const [task, setTask] = useState({\r\n        title: post.title,\r\n        id: post.id,\r\n        date: post.date,\r\n        completed: post.overdue,\r\n        overdue: post.overdue,\r\n        timeToComplete: post.timeToComplete\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTask(post);\r\n    }, [post])\r\n\r\n    useEffect(() => {\r\n        setTask(task);\r\n    }, [task])\r\n\r\n    //обработка input\r\n    const changeInputHandlerDate = event => {\r\n        event.persist()\r\n        createPost({\r\n            title: post.title,\r\n            id: post.id,\r\n            [event.target.name]: event.target.value,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: getTime(event.target.value),\r\n            changed: true \r\n        });\r\n        setTask({\r\n            title: post.title,\r\n            id: post.id,\r\n            [event.target.name]: event.target.value,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: getTime(event.target.value),\r\n            changed: true \r\n        })\r\n\r\n    }\r\n\r\n    const changeInputHandlerTitle = event => {\r\n        event.persist()\r\n        createPost({\r\n            [event.target.name]: event.target.value,\r\n            id: post.id,\r\n            date: post.date,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: timeToComplete,\r\n            changed: true \r\n        });\r\n        setTask({\r\n            [event.target.name]: event.target.value,\r\n            id: post.id,\r\n            date: task.date,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: timeToComplete,\r\n            changed: true \r\n        })\r\n\r\n    }\r\n\r\n    const changeInputHandlerCopy = event => {\r\n        event.persist()\r\n        createPost({\r\n            title: task.title,\r\n            id: Date.now().toString(),\r\n            completed: !post.completed,\r\n            overdue: false\r\n        });\r\n        setTask({\r\n            title: task.title,\r\n            id: Date.now().toString(),\r\n            date: task.date,\r\n            completed: !post.completed,\r\n            overdue: false\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={`card ${completed ? 'bg-success text-white' : 'bg-light text-dark'} mb-3`}>\r\n            <div className={`card-body ${overdue && post.date  ? 'bg-danger' : ''}`} style={{textDecoration: completed ? 'line-through' : 'none' }}>\r\n                <input type=\"text\" value={post.title} name=\"title\" onChange={(event)=>{changeInputHandlerTitle(event)}} className=\"form-control card-header\"/>\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-text\">complete before: </div>\r\n                    <div className=\"col-10\">\r\n                            <input className=\"form-control\" type=\"datetime-local\" value={post.date} name=\"date\" onChange={(event)=>{changeInputHandlerDate(event)}} id=\"datetime-local-input\"/>\r\n                    </div>  \r\n            </div>                       \r\n            </div>\r\n            <div className=\"input-group-text\"  style={{display: `${overdue && post.date ? 'none' : 'inline-block'}`}}>\r\n                    <input className=\"form-check-input btn-outline-info\" onChange={() => {completeTask(post.id)}} type=\"checkbox\" checked={completed} value={completed} aria-label=\"Checkbox for following text input\"/>\r\n            </div>\r\n            {completed && <button name='completed' value='false' onClick={(event) => changeInputHandlerCopy(event)} type=\"button\" className=\"btn btn-primary\">Copy</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts.posts,\r\n        id: state.posts.id\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    completeTask: completeTask,\r\n    overdueTask: overdueTask,\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst FinishedTasks = ({syncPosts}) => {\r\n\r\n    \r\n    if (syncPosts.length == 0) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        syncPosts.map(post => post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>)\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishedTasks)","import React from 'react'\r\n\r\nexport const Alert = ({text}) => (\r\n    <div className=\"alert alert-danger\" role=\"alert\">\r\n         {text}\r\n    </div>\r\n)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost, showAlert } from '../redux/actions';\r\nimport { Alert } from './Alert';\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: state.posts.posts,\r\n    alert: state.app.alert\r\n})\r\n\r\nclass PostForm extends React.Component {\r\n\r\n    state = {\r\n        title: '',\r\n        date: undefined,\r\n        completed: false,\r\n        overdue: false,\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault()\r\n\r\n        if (!this.state.title.trim()){\r\n            return this.props.showAlert('You are trying to create an empty task')\r\n        }\r\n\r\n        const thisDate = new Date()\r\n\r\n        const getTime = (date) =>{\r\n            if (date) {\r\n                const thisYear = thisDate.getFullYear()\r\n                const thisMonth = thisDate.getMonth()+1\r\n                const thisDay = thisDate.getDate()\r\n                const thisHour = thisDate.toString().split(' ')[4].split(':')[0]\r\n                const thisMinute = thisDate.toString().split(' ')[4].split(':')[1]\r\n                const thisSecond = thisDate.toString().split(' ')[4].split(':')[2]\r\n                \r\n                const secTask = Date.parse(`${date.split('T')[0].split('-').join('.')} ${date.split('T')[1]}`)\r\n                const secThis = Date.parse(`${thisYear}.${thisMonth}.${thisDay} ${thisHour}:${thisMinute}:${thisSecond}`)\r\n                const t = secTask-secThis;\r\n                return t ? t : null\r\n            }\r\n            }  \r\n        const newPost = {\r\n            title: this.state.title,\r\n            id: Date.now().toString(),\r\n            date: this.state.date,\r\n            completed: false,\r\n            overdue: false,\r\n            timeToComplete: getTime(this.state.date) \r\n        }\r\n\r\n        this.props.createPost(newPost)\r\n        \r\n        this.setState({title: ''}) \r\n\r\n    }\r\n\r\n    changeInputHandler = event => {\r\n        event.persist()\r\n        this.setState(prev => ({...prev, ...{\r\n            [event.target.name]: event.target.value\r\n        }}))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.submitHandler}>\r\n               {this.props.alert && <Alert text={this.props.alert}/>}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\">Task Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"title\"\r\n                        value={this.state.title}\r\n                        name=\"title\"\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n                    <label htmlFor=\"datetime-local-input\" className=\"col-form-label\">Date and time</label>\r\n                    <div className=\"col-10\">\r\n                        <input className=\"form-control\" onChange={this.changeInputHandler} type=\"datetime-local\" defaultValue={this.state.date} name=\"date\" id=\"datetime-local-input\"/>\r\n                    </div>\r\n                </div>    \r\n                <button className=\"btn btn-success\" type=\"submit\">Add</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = {\r\n    createPost, showAlert\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst UnfinishedTasks = ({syncPosts}) => {\r\n    \r\n    if (syncPosts.length == 0) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        syncPosts.map(post => !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>)\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: [...state.posts.sort(function(a, b) { return a.timeToComplete - b.timeToComplete})]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UnfinishedTasks)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst TodayTasks = ({syncPosts}) => {\r\n\r\n    const thisDate = new Date()\r\n\r\n\r\n    const thisYear = thisDate.getFullYear()\r\n    const thisMonth = thisDate.getMonth()+1\r\n    const thisDay = thisDate.getDate()\r\n\r\n\r\n    let date = [thisYear, thisMonth, thisDay];\r\n\r\n    let arrDate = date.map((item) => {\r\n        if(item > 0 && item < 10) {\r\n            return item = '0'+item\r\n        } return item\r\n    })\r\n    \r\n    if (syncPosts.length == 0) {\r\n        return 'No tasks yet'\r\n    }\r\n\r\n    \r\n    return (\r\n        syncPosts.map(post =>{ \r\n            if (post.date) { return post.date.split('T')[0] == arrDate.join('-') && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/> }\r\n            return <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: [...state.posts.filter((post)=>{if (!post.completed) return post}).sort(function(a, b) { if (!a.overdue || !b.overdue) return a.timeToComplete - b.timeToComplete}),...state.posts.filter((post)=>{if (post.completed) return post})]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodayTasks)","import React from 'react';\nimport FinishedTasks from './components/FinishedTasks';\nimport PostForm from './components/PostForm';\nimport UnfinishedTasks from './components/UnfinishedTasks';\nimport TodayTasks from './components/TodayTasks'\n\n\n\nconst App = () => {\n\n\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col text-white bg-secondary\">\n          <div className=\"col\" style={{paddingBottom: '10%'}}>\n          <h2 className=\"card-header\">Tasks for today</h2>\n            <PostForm/>\n          </div>\n          <TodayTasks />\n        </div>\n        <div className=\"col text-dark bg-warning\">\n          <h2 className=\"card-header\">Unfinished tasks</h2>\n          <div className=\"col\" style={{paddingBottom: '10%'}}>\n            <PostForm/>\n          </div>\n          <UnfinishedTasks />\n        </div>\n        <div className=\"col text-dark bg-info\">\n          <h2 className=\"card-header\">Finished tasks</h2>\n          <FinishedTasks />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { HIDE_ALERT, SHOW_ALERT } from \"./types\"\r\n\r\nconst initialState = {\r\n    alert: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_ALERT: \r\n            return {...state, alert: action.payload}  \r\n        case HIDE_ALERT: \r\n            return {...state, alert: null} \r\n        default: return state\r\n    }\r\n}","import { CREATE_POST, COMPLETE_POST, OVERDUE_POST } from \"./types\";\r\nimport {load} from 'redux-localstorage-simple';\r\n\r\nlet initialState = load({ \r\n    states: [\"posts\"] ,\r\n    namespace: \"Tasks\"\r\n    });\r\n\r\nif (!initialState || !initialState.posts || !initialState.posts.length) {\r\n    initialState = {\r\n        posts: []\r\n    }\r\n}\r\n\r\nexport const postsReducer = (state = initialState.posts, {type, title, id, date, completed, overdue, changed, timeToComplete}) => {\r\n    switch (type) {\r\n        case CREATE_POST:\r\n            if (!changed) {return [...state, {\r\n                title,\r\n                id,\r\n                date,\r\n                completed,\r\n                timeToComplete,\r\n                overdue\r\n            }]}\r\n            return [...state].map((task)=>{\r\n                if (task.id === id && !task.completed) {\r\n                    task.title = title\r\n                    task.id = id\r\n                    task.date = date\r\n                    task.completed = completed\r\n                    task.timeToComplete = timeToComplete\r\n                    task.overdue = overdue\r\n                }\r\n                return task     \r\n        })\r\n            \r\n        case COMPLETE_POST: \r\n\r\n            return [...state].map((task)=>{\r\n                if (task.id === id) {\r\n                    task.completed = !task.completed;\r\n                }\r\n                return task\r\n                \r\n            })\r\n        case OVERDUE_POST: \r\n            return [...state].map((task)=>{\r\n                if (task.id === id && !task.completed && task.date && task.date === date) {\r\n                    task.overdue = true;\r\n                    task.completed = null\r\n                } else if (task.changed) {task.overdue = false}\r\n                return task     \r\n        })\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { appReducer } from \"./appReducer\";\r\nimport { postsReducer } from \"./postsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    app: appReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {save} from 'redux-localstorage-simple';\nimport App from './App';\nimport { rootReducer } from './redux/rootReducer';\nimport {Provider} from 'react-redux'\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst middleWare = [thunk];\n\napplyMiddleware(...middleWare)\n\nconst store = createStore(\nrootReducer, composeWithDevTools(\n  applyMiddleware(...middleWare, save({ \n    states: [\"posts\"], \n    namespace: \"Tasks\"\n  }))  \n  )\n);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}