{"version":3,"sources":["redux/types.js","redux/actions.js","components/Post.js","components/FinishedTasks.js","components/Alert.js","components/PostForm.js","components/UnfinishedTasks.js","components/TodayTasks.js","App.js","redux/appReducer.js","redux/postsReducer.js","redux/rootReducer.js","index.js"],"names":["CREATE_POST","COMPLETE_POST","OVERDUE_POST","SHOW_ALERT","HIDE_ALERT","createPost","post","dispatch","console","log","type","title","id","date","completed","timeToComplete","overdue","changed","setTimeout","overdueTask","mapDispatchToProps","completeTask","connect","state","syncPosts","posts","changeTask","getTime","thisDate","Date","thisYear","getFullYear","thisMonth","getMonth","thisDay","getDate","thisHour","toString","split","thisMinute","thisSecond","t","parse","join","useState","task","setTask","useEffect","getLocalTodos","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","length","todoLocal","className","style","textDecoration","defaultValue","name","onBlur","event","persist","target","value","changeInputHandlerTitle","changeInputHandlerDate","display","onClick","defaultChecked","aria-label","now","changeInputHandlerCopy","tasks","setTasks","map","Alert","text","role","PostForm","undefined","submitHandler","preventDefault","trim","props","showAlert","newPost","setState","changeInputHandler","prev","onSubmit","this","alert","htmlFor","onChange","React","Component","payload","todos","app","sort","a","b","arrDate","item","App","paddingBottom","initialState","rootReducer","combineReducers","action","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4f4617c0.chunk.js","sourcesContent":["export const CREATE_POST = 'POST/CREATE_POST'\r\nexport const COMPLETE_POST = 'POST/COMPLETE_POST'\r\nexport const OVERDUE_POST = 'POST/OVERDUE_POST'\r\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\r\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\r\n\r\n","import { CREATE_POST, SHOW_ALERT, HIDE_ALERT, COMPLETE_POST, OVERDUE_POST } from \"./types\";\r\n\r\nexport function createPost(post) {\r\n    \r\n    return dispatch => {\r\n        console.log(post)\r\n        dispatch({\r\n            type: CREATE_POST,\r\n            title: post.title,\r\n            id: post.id,\r\n            date: post.date,\r\n            completed: post.completed,\r\n            timeToComplete: post.timeToComplete,\r\n            overdue: post.overdue,\r\n            changed: post.changed\r\n        })\r\n\r\n    if (post.timeToComplete > 0) {setTimeout(()=>{ \r\n            dispatch(overdueTask(post.id, post.date, post.changed))\r\n        }, post.timeToComplete)} \r\n    else {setTimeout(()=>{ \r\n            dispatch(overdueTask(post.id, post.date, post.changed))\r\n        }, 0)}\r\n    }\r\n}\r\n\r\nexport function completeTask(id){\r\n    return {\r\n            type: COMPLETE_POST,\r\n            id: id\r\n        }\r\n}\r\n\r\nexport function overdueTask(id, date, changed){\r\n    return  {\r\n            type: OVERDUE_POST,\r\n            id: id,\r\n            date: date,\r\n            changed: changed\r\n    }        \r\n}\r\n\r\nexport function showAlert(text) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: SHOW_ALERT,\r\n            payload: text\r\n        })\r\n\r\n        setTimeout(()=>{\r\n            dispatch(hideAlert())\r\n        }, 3000)\r\n    }\r\n}\r\n\r\nexport function hideAlert() {\r\n    return {\r\n        type: HIDE_ALERT\r\n    }\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { completeTask, createPost, overdueTask } from '../redux/actions';\r\n\r\nconst Post = ({post, completeTask, completed, overdue, changeTask, createPost, timeToComplete}) => {\r\n\r\n    \r\n\r\n    const getTime = (date) =>{\r\n        const thisDate = new Date()\r\n\r\n        if (date) {\r\n            const thisYear = thisDate.getFullYear()\r\n            const thisMonth = thisDate.getMonth()+1\r\n            const thisDay = thisDate.getDate()\r\n            const thisHour = thisDate.toString().split(' ')[4].split(':')[0]\r\n            const thisMinute = thisDate.toString().split(' ')[4].split(':')[1]\r\n            const thisSecond = thisDate.toString().split(' ')[4].split(':')[2]\r\n            \r\n            const secTask = Date.parse(`${date.split('T')[0].split('-').join('.')} ${date.split('T')[1]}`)\r\n            const secThis = Date.parse(`${thisYear}.${thisMonth}.${thisDay} ${thisHour}:${thisMinute}:${thisSecond}`)\r\n            const t = secTask-secThis;\r\n            return t ? t : null\r\n        }\r\n    }  \r\n\r\n    const [task, setTask] = useState({\r\n        title: post.title,\r\n        id: post.id,\r\n        date: post.date,\r\n        completed: post.overdue,\r\n        overdue: post.overdue,\r\n        timeToComplete: post.timeToComplete\r\n    });\r\n\r\n    //LocalStorage \r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTask(post);\r\n    }, [post])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTask(task);\r\n    }, [task])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(task))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n       \r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (post.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTask(todoLocal);\r\n            createPost(todoLocal);\r\n        }\r\n    }\r\n\r\n    //обработка инпута\r\n    const changeInputHandlerDate = event => {\r\n        event.persist()\r\n        createPost({\r\n            title: task.title,\r\n            id: post.id,\r\n            [event.target.name]: event.target.value,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: getTime(event.target.value),\r\n            changed: true \r\n        });\r\n        setTask({\r\n            title: task.title,\r\n            id: post.id,\r\n            [event.target.name]: event.target.value,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: getTime(event.target.value),\r\n            changed: true \r\n        })\r\n\r\n    }\r\n\r\n    const changeInputHandlerTitle = event => {\r\n        event.persist()\r\n        createPost({\r\n            [event.target.name]: event.target.value,\r\n            id: post.id,\r\n            date: task.date,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: timeToComplete,\r\n            changed: true \r\n        });\r\n        setTask({\r\n            [event.target.name]: event.target.value,\r\n            id: post.id,\r\n            date: task.date,\r\n            completed: post.completed,\r\n            overdue: task.overdue,\r\n            timeToComplete: timeToComplete,\r\n            changed: true \r\n        })\r\n\r\n    }\r\n\r\n    const changeInputHandlerCopy = event => {\r\n        event.persist()\r\n        createPost({\r\n            title: task.title,\r\n            id: Date.now().toString(),\r\n            completed: !post.completed,\r\n            overdue: false\r\n        });\r\n        setTask({\r\n            title: task.title,\r\n            id: Date.now().toString(),\r\n            date: task.date,\r\n            completed: !post.completed,\r\n            overdue: false\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={`card ${completed ? 'bg-success text-white' : 'bg-light text-dark'} mb-3`}>\r\n            <div className={`card-body ${overdue && post.date  ? 'bg-danger' : ''}`} style={{textDecoration: completed ? 'line-through' : 'none' }}>\r\n                <input type=\"text\" defaultValue={post.title} name=\"title\" onBlur={(event)=>{changeInputHandlerTitle(event)}} className=\"form-control card-header\"/>\r\n                <div className=\"card-body\">\r\n                    <div className=\"card-text\">complete before: </div>\r\n                    <div className=\"col-10\">\r\n                            <input className=\"form-control\" defaultValue={post.date ? post.date.split('T').join(' ') : post.date} type=\"datetime-local\" defaultValue={post.date} name=\"date\" onBlur={(event)=>{changeInputHandlerDate(event)}} id=\"datetime-local-input\"/>\r\n                    </div>  \r\n            </div>                       \r\n            </div>\r\n            <div className=\"input-group-text\"  style={{display: `${overdue && post.date ? 'none' : 'inline-block'}`}}>\r\n                    <input className=\"form-check-input btn-outline-info\" onClick={() => {completeTask(post.id)}} type=\"checkbox\" defaultChecked={completed ? true : false} value=\"\" aria-label=\"Checkbox for following text input\"/>\r\n            </div>\r\n            {completed && <button name='completed' value='false' onClick={(event) => changeInputHandlerCopy(event)} type=\"button\" className=\"btn btn-primary\">Copy</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts.posts,\r\n        id: state.posts.id\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    completeTask: completeTask,\r\n    overdueTask: overdueTask,\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Post)","import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst FinishedTasks = ({syncPosts}) => {\r\n\r\n    const [tasks, setTasks] = useState(syncPosts)\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(syncPosts);\r\n    }, [syncPosts])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(tasks);\r\n    }, [tasks])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(tasks))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (syncPosts.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTasks(todoLocal);\r\n        }\r\n    }\r\n    \r\n    if (syncPosts.length == 0 || !tasks) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        tasks.map(post => post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>)\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FinishedTasks)","import React from 'react'\r\n\r\nexport const Alert = ({text}) => (\r\n    <div className=\"alert alert-danger\" role=\"alert\">\r\n         {text}\r\n    </div>\r\n)","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost, showAlert } from '../redux/actions';\r\nimport { Alert } from './Alert';\r\n\r\nconst mapStateToProps = state => ({\r\n    todos: state.posts.posts,\r\n    alert: state.app.alert\r\n})\r\n\r\nclass PostForm extends React.Component {\r\n\r\n    state = {\r\n        title: '',\r\n        date: undefined,\r\n        completed: false,\r\n        overdue: false,\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault()\r\n\r\n        if (!this.state.title.trim()){\r\n            return this.props.showAlert('You are trying to create an empty task')\r\n        }\r\n\r\n        const thisDate = new Date()\r\n\r\n        const getTime = (date) =>{\r\n            if (date) {\r\n                const thisYear = thisDate.getFullYear()\r\n                const thisMonth = thisDate.getMonth()+1\r\n                const thisDay = thisDate.getDate()\r\n                const thisHour = thisDate.toString().split(' ')[4].split(':')[0]\r\n                const thisMinute = thisDate.toString().split(' ')[4].split(':')[1]\r\n                const thisSecond = thisDate.toString().split(' ')[4].split(':')[2]\r\n                \r\n                const secTask = Date.parse(`${date.split('T')[0].split('-').join('.')} ${date.split('T')[1]}`)\r\n                const secThis = Date.parse(`${thisYear}.${thisMonth}.${thisDay} ${thisHour}:${thisMinute}:${thisSecond}`)\r\n                const t = secTask-secThis;\r\n                return t ? t : null\r\n            }\r\n            }  \r\n        const newPost = {\r\n            title: this.state.title,\r\n            id: Date.now().toString(),\r\n            date: this.state.date,\r\n            completed: false,\r\n            overdue: false,\r\n            timeToComplete: getTime(this.state.date) \r\n        }\r\n\r\n        this.props.createPost(newPost)\r\n        \r\n        this.setState({title: ''}) \r\n\r\n    }\r\n\r\n    changeInputHandler = event => {\r\n        event.persist()\r\n        this.setState(prev => ({...prev, ...{\r\n            [event.target.name]: event.target.value\r\n        }}))\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.submitHandler}>\r\n               {this.props.alert && <Alert text={this.props.alert}/>}\r\n                <div className=\"form-group\">\r\n                    <label htmlFor=\"title\">Task Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        id=\"title\"\r\n                        value={this.state.title}\r\n                        name=\"title\"\r\n                        onChange={this.changeInputHandler}\r\n                    />\r\n                    <label htmlFor=\"datetime-local-input\" className=\"col-form-label\">Date and time</label>\r\n                    <div className=\"col-10\">\r\n                        <input className=\"form-control\" onChange={this.changeInputHandler} type=\"datetime-local\" value={this.state.date} name=\"date\" id=\"datetime-local-input\"/>\r\n                    </div>\r\n                </div>    \r\n                <button className=\"btn btn-success\" type=\"submit\">Add</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = {\r\n    createPost, showAlert\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostForm)","import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst UnfinishedTasks = ({syncPosts}) => {\r\n\r\n    const [tasks, setTasks] = useState(syncPosts)\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(syncPosts);\r\n    }, [syncPosts])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(tasks);\r\n    }, [tasks])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(tasks))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (syncPosts.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTasks(todoLocal);\r\n        }\r\n    }\r\n    \r\n    if (syncPosts.length == 0 || !tasks) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        tasks.map(post => !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>)\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: state.posts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UnfinishedTasks)","import React, { useEffect, useState } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport { createPost } from '../redux/actions';\r\nimport Post from './Post';\r\n\r\nconst TodayTasks = ({syncPosts}) => {\r\n\r\n    const [tasks, setTasks] = useState(syncPosts)\r\n\r\n    useEffect(() => {\r\n        getLocalTodos()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(syncPosts);\r\n    }, [syncPosts])\r\n\r\n    useEffect(() => {\r\n        saveLocalTodos();\r\n        setTasks(tasks);\r\n    }, [tasks])\r\n\r\n    const saveLocalTodos = () => {\r\n        localStorage.setItem(\"todos\", JSON.stringify(tasks))\r\n    }\r\n\r\n    const getLocalTodos = () => {\r\n\r\n        if (localStorage.getItem(\"todos\") === null){\r\n            localStorage.setItem(\"todos\", JSON.stringify([]));\r\n        }\r\n        else if (syncPosts.length == 0){           \r\n            let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\r\n            setTasks(todoLocal);\r\n            createPost(todoLocal);\r\n        }\r\n    }\r\n\r\n    const thisDate = new Date()\r\n\r\n\r\n    const thisYear = thisDate.getFullYear()\r\n    const thisMonth = thisDate.getMonth()+1\r\n    const thisDay = thisDate.getDate()\r\n\r\n\r\n    let date = [thisYear, thisMonth, thisDay];\r\n\r\n    let arrDate = date.map((item) => {\r\n        if(item > 0 && item < 10) {\r\n            return item = '0'+item\r\n        } return item\r\n    })\r\n    \r\n    if (syncPosts.length == 0 || !tasks) {\r\n        return 'No tasks yet'\r\n    }\r\n    return (\r\n        tasks.map(post =>{ \r\n            if (post.date) { return post.date.split('T')[0] == arrDate.join('-') && !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/> }\r\n            return !post.completed && <Post post={post} overdue={post.overdue} completed={post.completed} key={post.id} timeToComplete={post.timeToComplete}/>\r\n        })\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        syncPosts: [...state.posts.sort(function(a, b) { if (!a.overdue || !b.overdue) return a.timeToComplete - b.timeToComplete})]\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    createPost: createPost\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TodayTasks)","import React from 'react';\nimport FinishedTasks from './components/FinishedTasks';\nimport PostForm from './components/PostForm';\nimport UnfinishedTasks from './components/UnfinishedTasks';\nimport TodayTasks from './components/TodayTasks'\n\n\n\nconst App = () => {\n\n\n  return (\n    <div className=\"container pt-3\">\n      <div className=\"row\">\n        <div className=\"col text-white bg-secondary\">\n          <div className=\"col\" style={{paddingBottom: '10%'}}>\n          <h2 className=\"card-header\">Tasks for today</h2>\n            <PostForm/>\n          </div>\n          <TodayTasks />\n        </div>\n        <div className=\"col text-dark bg-warning\">\n          <h2 className=\"card-header\">Unfinished tasks</h2>\n          <div className=\"col\" style={{paddingBottom: '10%'}}>\n            <PostForm/>\n          </div>\n          <UnfinishedTasks />\n        </div>\n        <div className=\"col text-dark bg-info\">\n          <h2 className=\"card-header\">Finished tasks</h2>\n          <FinishedTasks />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { HIDE_ALERT, SHOW_ALERT } from \"./types\"\r\n\r\nconst initialState = {\r\n    alert: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SHOW_ALERT: \r\n            return {...state, alert: action.payload}  \r\n        case HIDE_ALERT: \r\n            return {...state, alert: null} \r\n        default: return state\r\n    }\r\n}","import { CREATE_POST, COMPLETE_POST, FETCH_POSTS, OVERDUE_POST, CHANGE_POST } from \"./types\"\r\n\r\nconst initialState = [\r\n\r\n];\r\n\r\nexport const postsReducer = (state = initialState, {type, title, id, date, completed, overdue, changed, timeToComplete}) => {\r\n    switch (type) {\r\n        case CREATE_POST:\r\n            if (!changed) {return [...state, {\r\n                title,\r\n                id,\r\n                date,\r\n                completed,\r\n                timeToComplete,\r\n                overdue\r\n            }]}\r\n            return [...state].map((task)=>{\r\n                if (task.id === id && !task.completed) {\r\n                    task.title = title\r\n                    task.id = id\r\n                    task.date = date\r\n                    task.completed = completed\r\n                    task.timeToComplete = timeToComplete\r\n                    task.overdue = overdue\r\n                }\r\n                return task     \r\n        })\r\n            \r\n        case COMPLETE_POST: \r\n\r\n            return [...state].map((task)=>{\r\n                if (task.id === id) {\r\n                    task.completed = !task.completed;\r\n                }\r\n                return task\r\n                \r\n            })\r\n        case OVERDUE_POST: \r\n            return [...state].map((task)=>{\r\n                if (task.id === id && !task.completed && task.date && task.date === date) {\r\n                    task.overdue = true;\r\n                    task.completed = null\r\n                } else if (task.changed) {task.overdue = false}\r\n                return task     \r\n        })\r\n        default: return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { appReducer } from \"./appReducer\";\r\nimport { postsReducer } from \"./postsReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    posts: postsReducer,\r\n    app: appReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport App from './App';\nimport { rootReducer } from './redux/rootReducer';\nimport {Provider} from 'react-redux'\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(\n    thunk\n  ),\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n))\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(\n  app,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}